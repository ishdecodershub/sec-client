{"version":3,"sources":["images/home-bg.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","setState","loading","Axios","get","then","_ref2","data","success","response","posts","console","log","catch","stop","state","map","curr","index","react_default","createElement","Fragment","key","_id","className","Link","to","concat","title","subtitle","date","style","marginTop","id","href","backgroundImage","Logo","Component","Boolean","window","location","hostname","match","Index","ReactDOM","render","BrowserRouter","Switch","Route","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b06fa3c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/home-bg.6ff4733b.jpg\";","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './App.css';\n\nimport Logo from './images/home-bg.jpg';\nimport Axios from 'axios';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts: [],\n      loading: false,\n    }\n  }\n  componentDidMount = async () => {\n    /* Setting loading flag to true, to show loader till the documents are being loaded */\n    this.setState({ loading: true });\n\n    /* Fetching documents from the database */\n    await Axios\n      .get('https://ofylujjtsfbnpvckziygilzn.herokuapp.com/api/v1/documents')\n      .then(({ data }) => {\n        /* On receiving a response */\n        const { success } = data;\n\n        /* Destructuring so that response will be equal to data.response */\n        const { data: response } = data;\n\n        /* Making sure the type of success is boolean */\n        if (typeof success === \"boolean\") {\n\n          /* If the success is true. Set the state */\n          if (success) {\n            this.setState({ posts: response });\n          } else {\n            /* If success is false, do nothing right now as we aren't sending success = false in /api/v1/documents GET */\n            console.log('Received success of false from backend.');\n          }\n        } else {\n          /* If the status was not boolean, the data sent from the backend is not correct. Do nothing for now. */\n          console.log('Status received from the back-end was not boolean');\n        }\n    }).catch(console.log); // Doing nothing right now for error.\n\n    /* Loading = false */\n    this.setState({ loading: false });\n  }\n  render() {\n    const posts = this.state.posts.map((curr, index) => (\n      <React.Fragment key={curr._id}>\n        <div className=\"post-preview\">\n        <Link to={`/posts/${curr._id}`}>\n          <h2 className=\"post-title\">\n           {curr.title}\n          </h2>\n          <h3 className=\"post-subtitle\">\n            {curr.subtitle}\n          </h3>\n        </Link>\n        <p className=\"post-meta\">Posted on {curr.date}</p>\n      </div>\n      <hr />\n      </React.Fragment>\n    ));\n    return this.state.loading ? (\n      <div className='spinner' style={{ marginTop: '40vh' }}>\n        <div className='bubble-1'></div>\n        <div className='bubble-2'></div>\n      </div>\n    ) : (\n      <div>\n        <nav className=\"navbar navbar-expand-lg navbar-light fixed-top\" id=\"mainNav\">\n          <div className=\"container\">\n            <a className=\"navbar-brand\" href=\"index.html\">National Security</a>\n          </div>\n        </nav>\n        {/* Page Header */} \n        <header className=\"masthead\" style={{backgroundImage: `url(${Logo})`}}>\n          <div className=\"overlay\" />\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-lg-8 col-md-10 mx-auto\">\n                <div className=\"site-heading\">\n                  <h1>Task Force on National Security</h1>\n                  <span className=\"subheading\">Some related subtitle here</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </header>\n        {/* Main Content */}\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-lg-8 col-md-10 mx-auto\">\n              {posts}\n            </div>\n          </div>\n        </div>\n        {/* Footer */}\n        <footer>\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-lg-8 col-md-10 mx-auto\">\n                <p className=\"copyright text-muted\">Copyright Â© National Security India</p>\n              </div>\n            </div>\n          </div>\n        </footer>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst Index = () => <div>Hello</div>\nconst Router = () => (\n    <Switch>\n        <Route exact path=\"/\" component={App} />\n        <Route exact path=\"/comp\" component={Index} />>\n    </Switch>\n\n)\n\nReactDOM.render(<BrowserRouter><Router /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}